# 信任Docker网络的IP地址范围
set_real_ip_from 172.0.0.0/8; # Docker网络的 IP 范围
set_real_ip_from fd00::/8; # Docker的 IPv6 范围

# CloudFlare IP地址范围
# https://www.cloudflare.com/zh-cn/ips/
set_real_ip_from 103.21.244.0/22;
set_real_ip_from 103.22.200.0/22;
set_real_ip_from 103.31.4.0/22;
set_real_ip_from 104.16.0.0/13;
set_real_ip_from 104.24.0.0/14;
set_real_ip_from 108.162.192.0/18;
set_real_ip_from 131.0.72.0/22;
set_real_ip_from 141.101.64.0/18;
set_real_ip_from 162.158.0.0/15;
set_real_ip_from 172.64.0.0/13;
set_real_ip_from 173.245.48.0/20;
set_real_ip_from 188.114.96.0/20;
set_real_ip_from 190.93.240.0/20;
set_real_ip_from 197.234.240.0/22;
set_real_ip_from 198.41.128.0/17;

set_real_ip_from 2400:cb00::/32;
set_real_ip_from 2606:4700::/32;
set_real_ip_from 2803:f800::/32;
set_real_ip_from 2405:b500::/32;
set_real_ip_from 2405:8100::/32;
set_real_ip_from 2a06:98c0::/29;
set_real_ip_from 2c0f:f248::/32;

# 让Nginx使用CF-Connecting-IP来获取Cloudflare客户端的真实IP
real_ip_header CF-Connecting-IP;
# 启用递归查找真实IP
real_ip_recursive on;

server {
    listen 80 reuseport default_server;
    listen [::]:80 reuseport default_server;

    server_name _;

    # 直接关闭连接，不返回任何信息
    return 444;
}

server {
    listen 443 ssl reuseport default_server;
    listen [::]:443 ssl reuseport default_server;
    listen 443 quic reuseport default_server;
    listen [::]:443 quic reuseport default_server;

    server_name _;

    ssl_reject_handshake on;

    # SSL证书配置
    ssl_certificate /etc/nginx/certs/default_server.crt;
    ssl_certificate_key /etc/nginx/certs/default_server.key;

    ssl_stapling off;
    ssl_stapling_verify off;

    # 阻止访问敏感文件
    location ~* ^/(\.(?!well-known)(env|git|gitignore|htaccess|hg|svn|bzr|editorconfig|npmrc|bashrc|bash_profile|bash_history|[^/]+)|composer\.(json|lock)|package\.json|yarn\.lock)$ {
        access_by_lua_block {
            ngx.log(ngx.ERR, "Access denied to sensitive file: ", ngx.var.uri)
            return ngx.exit(444);
        }
        access_log off;
        log_not_found off;
    }

    # 针对任何非标准或畸形请求（包括恶意TLS握手）
    location / {
        access_by_lua_block {
            -- 检查请求行中是否包含控制字符或高位非法字节
            if string.match(ngx.var.request, "[\x00-\x1F\x7F-\xFF]") then
                ngx.log(ngx.ERR, "Blocked malformed request (control chars) from: ", ngx.var.remote_addr)
                return ngx.exit(444)
            end
        }
        return 444;
    }

    return 444;
}