# /etc/nginx/nginx.conf

load_module modules/ngx_http_zstd_filter_module.so;
load_module modules/ngx_http_zstd_static_module.so;

user  nginx;
worker_processes  auto; # 设置工作进程数量，通常为CPU核心数

# 设置原则: 需与worker_connections配合，通常设置为worker_connections的两倍（反向代理场景下，每连接可能需要两个文件描述符：一个用于客户端，一个用于上游服务器）
worker_rlimit_nofile  65535; # 指定每个工作进程可打开的最大文件描述符数量

# 启动一个默认线程池，将阻塞任务（如磁盘 I/O）交给线程池，释放主线程处理更多请求
# 需启用 aio on;
# threads：线程数，建议设为CPU核心数的2-4倍
# max_queue: 任务队列上限，防止任务堆积
thread_pool  default threads=16 max_queue=65536; # 分配16个线程来处理请求，并且这个线程池的队列最大长度为65536。可以处理更多的并发请求，减少请求等待时间提高系统的吞吐量

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;

events {
    use  epoll; # 使用epoll作为事件模型，默认使用epoll作为事件驱动模型，无需显式配置use epoll即可生效

    # 启用后工作进程一次处理多个新连接，提升高并发性能，适用高并发场景
    multi_accept  on; # 控制工作进程是否一次性接受队列中所有新连接

    # 设置每个工作进程可处理的最大并发连接数 默认值512
    # 根据内存和worker_rlimit_nofile调整，常见1024-65536
    worker_connections  2048;
}

# xquic_log  "pipe:rollback /var/log/nginx/xquic.log baknum=10 maxsize=1G interval=1d adjust=600" info;

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream; # 默认值text/plain
    charset       utf-8; # 响应内容的字符编码

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # buffer=512k 设置512KB内存缓冲区，减少磁盘I/O
    # 缓冲数据每10秒写入磁盘，平衡性能与数据安全
    access_log  /var/log/nginx/access.log main buffer=512k flush=10s; # 把访问日志使用main格式缓存在内存中

    aio  on; # 启用异步I/O，提升静态文件处理性能
    sendfile  on; # 使用sendfile系统调用，优化静态文件传输，直接从磁盘到网络传输文件，减少CPU和内存开销，减少上下文切换
    tcp_nopush  on; # 启用TCP_CORK选项，优化数据包发送效率，延迟发送数据包，合并小数据包，减少网络开销
    tcp_nodelay  on; # 启用TCP_NODELAY选项，优化数据发送实时性，禁用Nagle算法，立即发送小数据包，降低延迟

    keepalive_timeout  120s; # 设置与客户端长连接的空闲超时时间，控制客户端与服务器的长连接保持时间，节省连接建立开销 默认值75s
    keepalive_requests  5000; # 设置每个长连接可处理的最大请求数，限制单一长连接的请求次数，控制资源占用
    server_tokens  off; # 控制HTTP响应头中是否显示版本信息
    server_info  off; # 控制是否在HTTP响应头或错误页面显示Tengine服务器信息，Tengine特有参数
    server_tag  "Honeok Edge"; # 自定义HTTP响应头中的服务器标识，覆盖默认的Tengine名称，Tengine特有参数 语法: server_tag string | off;  默认值Tengine

    # zstd  on; # 启用Zstandard压缩算法
    # zstd_static  on; # 预压缩静态文件，减少实时压缩开销，适合静态资源
    # zstd_comp_level  4; # Zstandard压缩级别，范围1（快）到22（高压缩） 建议3-5，平衡压缩速度与比率，适合高流量场景
    # zstd_buffers  32 4k; # Zstandard压缩的缓冲区数量和大小，用于处理压缩数据，增加number和size（如 16 16k）可提升高并发下压缩性能，但占用更多内存 getconf PAGE_SIZE 获取默认值 32 4k总共128KB
    # zstd_min_length  256; # Zstandard压缩的最小响应数据长度（字节），通用推荐值: zstd_min_length 1024;  太低（如 0）可能浪费CPU压缩小数据；太高可能错过压缩机会
    # zstd_types text/css text/xml text/plain text/javascript application/json
    #             application/javascript application/x-javascript application/xml image/svg+xml
    #             application/rss+xml application/atom+xml;

    # # Brotli压缩率通常高于Gzip和Zstd尤其擅长处理静态文本资源
    # brotli  on; # Brotli动态内容压缩，针对动态生成的HTML等内容进行实时压缩。为平衡性能和压缩率，建议brotli_comp_level设置为4到6之间，过高的级别会消耗过多CPU
    # brotli_static  on; # Brotli静态资源压缩
    # brotli_comp_level  5; # 设置动态压缩级别为5，实际上是为动态压缩的场景设定的一个安全、高效的平衡点
    # brotli_buffers  32 4k; # 为动态压缩设置内存缓冲区。它定义了从上游服务获取响应数据时，用来进行实时Brotli压缩的内存块数量和每块的大小，getconf PAGE_SIZE 获取默认值 32 4k总共128KB
    # # https://gablaxian.com/blog/brotli-compression
    # brotli_min_length  256; # 最小压缩长度为256字节
    # # 由brotli_comp_level (压缩级别) 间接控制，当设置brotli_comp_level时，Brotli库会根据该级别自动选择一个最优的窗口大小，例如，高级别的压缩（如 11）会自动使用一个非常大的窗口
    # # brotli_window  1024k; # 设置了Brotli压缩算法的"滑动窗口"大小，被brotli_comp_level自动接管
    # brotli_types text/css text/xml text/plain text/javascript application/json
    #             application/javascript application/x-javascript application/xml image/svg+xml
    #             application/rss+xml application/atom+xml;

    # 开启Gzip压缩，减小传输内容大小，提高页面加载速度
    gzip  on;
    gzip_static  on; # 启用静态文件的Gzip压缩（如果已存在压缩文件，将直接使用）
    gzip_vary  on; # 添加Vary: Accept-Encoding头，防止CDN等中间缓存发生"缓存中毒"，需对压缩与未压缩版本创建不同的缓存键，确保下游缓存能为不同客户端正确提供压缩或未压缩版本
    gzip_disable  "MSIE [1-6]\.|Netscape/4"; # 历史遗留的产物，禁用对早期IE浏览器和Netscape 4浏览器的Gzip压缩
    gzip_comp_level  6; # 设置Gzip压缩级别为6（范围为1-9，越高压缩率越高但占用CPU更多）
    gzip_min_length  256; # 设置进行压缩的最小文件长度字节
    gzip_buffers  32 4k; # 设置用于Gzip压缩的缓冲区数量和大小 getconf PAGE_SIZE 获取默认值 32 4k总共128KB
    gzip_proxied  any; # 指定对后端代理服务器（如业务服务器）返回的响应，在何种情况下启用Gzip压缩，any 能确保Gzip压缩最大限度地覆盖所有用户，有效降低对所有终端用户的带宽消耗
    gzip_types text/css text/xml text/plain text/javascript application/json
                application/javascript application/x-javascript application/xml image/svg+xml
                application/rss+xml application/atom+xml;

    reset_timedout_connection  on; # 客户端连接因为超时（keepalive_timeout或send_timeout到期）而被关闭时，会立刻重置连接，而不是等待它自动关闭或继续保持连接，向客户端发送一个TCP RST包
    client_header_buffer_size  1k; # 内存缓冲区大小，用来存放客户端（浏览器）请求的请求头 (Request Headers)
    # https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements
    client_body_buffer_size  64k; # 设置客户端请求体的内存缓冲区大小，专门用于存放客户端POST请求的请求体 (Request Body)，例如用户提交的表单数据、上传的小文件等
    large_client_header_buffers  4 16k; # 设置较大的客户端请求头缓冲区数量和大小，允许更大的请求头(最大64k)，以支持复杂认证令牌(Token)。
    output_buffers  2 32k; # 用于存放即将发送给客户端的响应数据的内存缓冲区 默认值2 32k
    send_timeout  15s; # 设置了服务器向客户端发送响应数据的超时时间，如果在此时间内未发送数据，连接将被关闭 默认值60s

    # 指在两次连续的读操作（read operation）之间的最长等待时间。如果在这段时间内，没有收到任何新的请求体数据，就会关闭连接。
    client_body_timeout  15s; # 设置服务器等待客户端发送请求体 (Request Body) 的超时时间 默认值60s

    # 客户端在指定时间内没有把所有的请求头信息（如 Host, User-Agent等）全部发送过来，服务器将会关闭连接，并返回408Request Timeout错误
    # 这个指令对于防范"慢速连接攻击"（如 Slowloris 攻击）至关重要，一个正常的客户端应该在建立连接后瞬间就把请求头发送完毕
    client_header_timeout  10s; # 设置服务器等待客户端发送完整请求头 (Request Headers) 的超时时间，默认值60s

    # 单服务器环境建议: etag on;在只有一台服务器的情况下，ETag能与Last-Modified头互补，提供更精确的缓存验证机制，有效节省带宽
    # 多服务器集群：默认ETag含inode号会导致缓存失效，建议关闭
    etag  on; # 为静态资源自动生成ETag (Entity Tag) HTTP响应头，启用ETag头用于标识资源的版本，帮助浏览器进行缓存管理

    #################### Tengine Xquic ####################
    # https://github.com/alibaba/tengine/blob/master/modules/ngx_http_xquic_module/README.md
    # https://tengine.taobao.org/document/xquic.html

    # xquic_ssl_certificate        /etc/nginx/certs/certificate.crt;
    # xquic_ssl_certificate_key    /etc/nginx/certs/certificate.key;
    # xquic_ssl_session_ticket_key /etc/nginx/certs/session_ticket.key;

    xquic_congestion_control  bbr;
    xquic_socket_rcvbuf  5242880;
    xquic_socket_sndbuf  5242880;
    xquic_anti_amplification_limit  5;
    #################### Tengine Xquic ####################

    # https://nginx.org/en/docs/http/ngx_http_v2_module.html
    http2  on;
    # https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements
    http2_body_preread_size  128k; # 预读缓冲区不足导致HTTP/2上传速度仅为HTTP/1.1的一半，增至≥128KB后性能明显提升
    http2_chunk_size  16k; # 将响应内容分割成HTTP/2数据帧 (DATA frame) 时，每个数据帧的最大字节数，减少发送的数据帧数量，降低系统调用次数和帧处理开销
    http2_max_concurrent_streams  256; # 用于设置在一个HTTP/2连接上，服务器允许客户端同时打开的最大流 (Stream) 的数量，通常无需修改，保持默认的128即可，但在特定场景下可适度增大
    # 只有在一种非常极端的情况下，比如客户端需要通过一个 HTTP/2连接上传大量数据（例如gRPC的客户端流式上传），并且有性能瓶颈时，才可能需要考虑增大此值。但在绝大多数Web服务中这种情况不会发生
    http2_recv_buffer_size  256k; # 为每个worker进程准备的一个接收缓冲区，专门用于存放从客户端接收到的HTTP/2数据

    ssl_prefer_server_ciphers  on;  # 强制使用服务器端配置的加密算法列表 (ssl_ciphers) 中的第一个兼容算法
    ssl_protocols  TLSv1.2 TLSv1.3;  # 使用TLSv1.2、TLSv1.3协议
    ssl_session_cache  shared:SSL:10m; # 用于在服务器端创建一个缓存区域，专门用来存储已建立的SSL/TLS连接的会话信息，实现SSL/TLS会话复用，10m 大约可以存储40000个会话
    ssl_session_timeout  1h; # 存放在ssl_session_cache中的SSL/TLS会话信息的有效时间，即客户端可以在多长时间内回来"复用"这个会话
    # ssl_certificate_cache  max=2000 inactive=5m valid=20m; # 配置SSL客户端证书验证缓存（OCSP stapling / client cert verification）
    ssl_buffer_size  4k; # 用来发送SSL/TLS数据的内存缓冲区大小，默认值16k
    ssl_stapling  on; # 开启OCSP Stapling (在线证书状态协议装订) 功能，存放在ssl_stapling_cache中
    ssl_stapling_verify  on; # 启用 OCSP 响应验证，确保服务器发送的证书状态可信

    # 在ssl_session_cache已经能够完美解决会话复用问题，且没有任何安全副作用的情况下，为了内存节省而去启用有安全风险的ssl_session_tickets得不偿失
    ssl_session_tickets  off; # 用于加密和解密这些票据的密钥（ssl_session_ticket_key指令设置）如果长时间不更换，一旦泄露攻击者就可以解密截获到的所有会话票据
    # ssl_session_tickets  on; # 启用TLS会话票据，允许客户端复用会话，减少SSL握手开销
    # ssl_session_ticket_key  /etc/nginx/certs/ticket12.key; # 指定用于加密SSL会话票据的密钥文件，密钥文件可用于加密和解密会话票据
    # ssl_session_ticket_key  /etc/nginx/certs/ticket13.key;

    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

    # add_header Content-Security-Policy  "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";

    # https://hstspreload.org
    # preload: 表示将域名加入到浏览器的内置HSTS预加载列表中，这意味着即使用户是第一次访问您的网站，浏览器也已经"提前知道"您的网站必须使用HTTPS，提供了最高级别的安全保护
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # 启用HTTP严格传输安全HSTS头，强制浏览器仅通过HTTPS与服务器通信
    add_header X-Frame-Options "SAMEORIGIN" always; # 防止"点击劫持"(Clickjacking) 攻击，限制页面嵌套在同源框架中
    # add_header X-XSS-Protection "1; mode=block" always; # 启用浏览器的跨站脚本(XSS)过滤，并在检测到攻击时阻止页面加载，已经过时且被主流浏览器废弃
    add_header X-Content-Type-Options "nosniff" always; # 禁止浏览器进行MIME类型嗅探，防止上传的恶意脚本被执行
    add_header Referrer-Policy "strict-origin-when-cross-origin" always; # 控制HTTPReferer头的内容,保护用户隐私避免泄露来源信息，no-referrer是一个最高级别的隐私，而牺牲大量分析功能和部分外部兼容性的决定
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), interest-cohort=()"; # 通过Permissions-Policy头限制特定的浏览器API，防止未经授权的访问
    add_header Vary "Accept-Encoding" always; # 强制添加Vary头，告知缓存服务器根据Accept-Encoding进行内容变体存储

    server_names_hash_max_size  512; # 用于设置存放服务器名称（server_name）哈希表的最大尺寸，默认值512
    server_names_hash_bucket_size  64; # 设置服务器名称哈希表中每个"桶"（Bucket）的大小
    types_hash_max_size  2048; # 存放MIME类型哈希表的最大尺寸
    types_hash_bucket_size  64; # 设置MIME类型哈希表中每个"桶"（Bucket）的大小，默认值通常是32,64,或128，与CPU缓存行大小对齐 getconf LEVEL1_DCACHE_LINESIZE

    # 这个哈希表主要由map指令使用，当使用map指令来定义大量的键值映射规则时（例如根据User-Agent映射到不同的后端服务），将这些规则存入一个变量哈希表中，以便进行高效查找
    variables_hash_max_size  1024; # 设置了存放变量哈希表 (variables hash table) 的最大尺寸
    variables_hash_bucket_size  64; # 设置变量哈希表的桶大小

    # 用于开启一个文件元数据缓存，对于任何需要处理大量静态文件请求的服务器需开启此项
    open_file_cache max=20000 inactive=30s; # 设置缓存中最多可以存放20000个条目，如果缓存满了会根据LRU（最近最少使用）原则淘汰旧的条目，如果一个缓存条目在30秒内没有被访问，则自动将其从缓存中移除
    open_file_cache_valid  60s; # 设置缓存的元信息的有效期为60秒
    open_file_cache_min_uses  2; # 设置一个文件至少要被访问2次，它的文件句柄才会被缓存，确保缓存里都是热门资源
    open_file_cache_errors  on; # 缓存404 403这类错误信息，有效避免对一个不存在的文件（如网站根目录下缺失的favicon.ico）反复查询磁盘

    limit_conn_zone $binary_remote_addr zone=perip:10m; # 定义连接数限制的共享内存区域，使用客户端的二进制形式的IP地址作为键，定义共享内存区域大小
    limit_conn perip 30; # 应用连接数限制的指令，使用前面定义的区域，允许每个客户端IP地址的最大并发连接数
    limit_conn_log_level info; # 当连接因超出限制被拒绝时，以info级别记录日志
    limit_conn_status 429; # 当某个客户端的连接数超过了limit_conn模块所设定的最大值时，返回HTTP429状态码，这意味着客户端已经达到了服务器允许的最大连接数，需要减少连接才能继续访问
    # limit_conn_dry_run  on; # 只在测试时开启

    # 限制请求的频率（或称速率），而不是并发连接数，有效防止客户端在短时间内发起海量请求，从而防御暴力破解（如不断尝试登录密码）、API滥用、以及某些类型的CC攻击
    limit_req_zone $binary_remote_addr zone=reqip:50m rate=20r/s; # 定义请求速率限制的共享内存区域，使用客户端的二进制形式的IP地址作为键，内存区域大小为50MB，每秒平均请求速率为20个
    limit_req zone=reqip burst=50 nodelay; # 允许的最大突发请求数，请求不延迟处理
    limit_req_status 429; # 当请求超过limit_req模块设置的速率限制时，返回HTTP429状态码，而不是默认的503

    # 推荐用于子配置文件限制
    # limit_rate_after 100m; # 在传输100m后开始限制带宽
    # limit_rate 50m; # 设置带宽限制

    #################### FastCGI ####################
    # https://cloud.tencent.com/developer/article/1683437
    fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2 keys_zone=fcgi_cache:20m max_size=1g inactive=30m; # 定义FastCGI缓存路径缓存层次为1:2，区域名为fcgi_cache，大小为20MB最大缓存大小为1GB，30分钟后未被访问的缓存将被删除
    fastcgi_cache_key "$scheme$request_method$host$request_uri"; # 设置FastCGI缓存键，包含请求的协议、方法、主机、URI和接收编码

    fastcgi_cache_methods GET HEAD; # 指定缓存的请求方法，仅缓存GET和HEAD请求
    fastcgi_cache_bypass $http_cookie; # 如果请求中包含Cookie，则绕过缓存
    fastcgi_no_cache $http_cookie; # 如果请求中包含Cookie，则不缓存响应
    fastcgi_cache_valid 200 302 120m; # 对于200 302响应，缓存有效期为120分钟
    fastcgi_cache_valid 301 1d; # 301永久重定向缓存1天
    fastcgi_cache_valid 404 10m; # 对于404响应，缓存有效期为10分钟防止404攻击
    # fastcgi_cache_valid any 5m;

    fastcgi_cache_lock on; # 启用缓存锁，防止多个请求同时处理相同的缓存未命中
    fastcgi_cache_lock_timeout 5s; # 设置缓存锁超时时间为5秒
    fastcgi_cache_background_update on; # 启用后台更新缓存功能，当请求的缓存过期时，可以在后台更新缓存

    fastcgi_buffering on; # 启用FastCGI响应缓冲
    fastcgi_buffer_size 128k; # 设置FastCGI响应缓冲区大小为128KB
    fastcgi_buffers 16 4m; # 设置用于FastCGI响应的缓冲区数量和大小（16个1024KB的缓冲区）
    fastcgi_busy_buffers_size 8m; # 设置正在使用的FastCGI缓冲区的最大大小为8MB
    fastcgi_keep_conn on; # 在处理完请求后保持与FastCGI服务器的连接

    fastcgi_intercept_errors on; # 启用错误拦截使能够处理FastCGI返回的错误
    fastcgi_hide_header Server;
    fastcgi_hide_header X-Powered-By; # 隐藏FastCGI响应头中的X-Powered-By字段，以防止泄露服务器技术信息
    fastcgi_hide_header X-Runtime;

    # 网站搭建初期需要配置大一点的值,后期减少时间为60s,确保恶意进程不会长时间停留
    fastcgi_connect_timeout 300s; # 设置与FastCGI服务器建立连接的超时时间为300秒
    fastcgi_send_timeout    300s; # 设置向FastCGI服务器发送请求的超时时间为300秒
    fastcgi_read_timeout    300s; # 设置从FastCGI服务器读取响应的超时时间为300秒

    #################### Proxy ####################
    proxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=pro_cache:20m max_size=1g inactive=30m;     # 定义代理缓存路径,缓存层次为1:2,区域名为proxy_cache,大小为20MB,最大缓存大小为1GB,30分钟后未被访问的缓存将被删除
    proxy_cache_key "$request_method$host$request_uri$is_args$args$http_accept_encoding";                    # 设置代理缓存键,包含请求的协议、方法、主机、URI和接收编码

    proxy_cache_methods GET HEAD;                     # 指定缓存的请求方法,仅缓存GET和HEAD请求
    proxy_cache_bypass $http_cookie;                  # 如果请求中包含Cookie,则绕过缓存
    proxy_no_cache $http_cookie;                      # 如果请求中包含Cookie,则不缓存响应

    proxy_cache_valid 200 301 302 304 120m;           # 对特定的 HTTP 状态码启用缓存，缓存有效期为120分钟
    proxy_cache_valid 404 10m;                        # 对于404响应,缓存有效期为10分钟
    proxy_cache_valid 500 502 503 504 400 403 429 0;  # 对于500、502、503和504响应不缓存

    proxy_cache_lock on;                              # 启用缓存锁,防止多个请求同时处理相同的缓存未命中
    proxy_cache_lock_timeout 5s;                      # 设置缓存锁超时时间为5秒
    proxy_cache_background_update on;                 # 启用后台更新，当缓存未命中时，允许新的请求更新缓存
    proxy_hide_header Server;
    proxy_hide_header X-Powered-By;                   # 隐藏代理请求响应头中的X-Powered-By字段，以防止泄露服务器技术信息
    proxy_hide_header X-AspNet-Version;
    proxy_hide_header X-AspNetMvc-Version;
    proxy_hide_header X-Drupal-Cache;
    proxy_hide_header X-Jenkins;
    proxy_hide_header X-Generator;
    proxy_hide_header X-Runtime;
    proxy_hide_header X-Backend-Server;

    proxy_buffering                on;                # 启用代理响应缓冲
    proxy_buffer_size              128k;              # 设置代理响应缓冲区大小为128KB
    proxy_buffers                  16 4m;             # 设置用于代理响应的缓冲区数量和大小(16个4M的缓冲区)
    proxy_busy_buffers_size        8m;                # 设置正在使用的代理缓冲区的最大大小为8MB
    proxy_socket_keepalive         on;                # 在 Nginx 与上游服务器（如后端 API、应用服务器）之间启用 TCP Keepalive（长连接）功能，以提高连接效率和性能

    proxy_intercept_errors         on;                # 启用错误拦截，使Nginx能够处理后端服务器返回的错误

    proxy_headers_hash_max_size    1024;              # 设置代理请求头哈希表的最大大小为1024
    proxy_headers_hash_bucket_size 128;               # 设置代理请求头哈希表的桶大小为128

    # 与上方FastCGI的timeout参数一致
    proxy_connect_timeout          300s;              # 设置与后端服务器建立连接的超时时间为300秒
    proxy_send_timeout             300s;              # 设置向后端服务器发送请求的超时时间为300秒
    proxy_read_timeout             300s;              # 设置从后端服务器读取响应的超时时间为300秒

    include /etc/nginx/conf.d/*.conf;
}