# Copyright (c) 2025 honeok <i@honeok.com>
#
# Description: This configuration file is used to define custom rules for the Mihomo GUI.
#
# Thanks:
# https://github.com/qichiyuhub/rule
# https://github.com/Kook-9527/Plugin-backup
# https://github.com/zzwsec
#
# SPDX-License-Identifier: GPL-2.0-only

## 全局配置
port: 7890 # HTTP(S)代理服务器端口
socks-port: 7891 # SOCKS5代理端口
mixed-port: 10801 # HTTP(S)和SOCKS代理混合端口
redir-port: 7892 # 透明代理端口，用于Linux和MacOS

tproxy-port: 7893 # Linux透明代理服务器端口

allow-lan: true # 允许局域网连接
bind-address: "*" # 绑定IP地址，仅作用于allow-lan为true，'*'表示所有地址
skip-auth-prefixes: # 设置跳过验证的 IP 段
  - 127.0.0.1/8
  - ::1/128
lan-allowed-ips: # 允许连接的IP地址段，仅作用于allow-lan为true, 默认值为0.0.0.0/0和::/0
  - 0.0.0.0/0
  - ::/0

#  find-process-mode has 3 values:always, strict, off
#  - always: 开启，强制匹配所有进程
#  - strict: 默认，由 mihomo 判断是否开启
#  - off: 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict

mode: rule

log-level: warning # 日志等级silent/error/warning/info/debug

ipv6: false # IPv6总开关，关闭阻断所有IPv6链接和屏蔽DNS请求AAAA记录

tcp-concurrent: true # TCP并发连接所有IP, 将使用最快握手的TCP

# interface-name: en0 # 设置出口网卡

# 全局TLS指纹，优先低于proxy内的client-fingerprint
# 可选： "chrome","firefox","safari","ios","random","none" options.
# Utls is currently support TLS transport in TCP/grpc/WS/HTTP for VLESS/Vmess and trojan.
global-client-fingerprint: chrome

# TCP保持活动间隔
disable-keep-alive: false # 目前在android端强制为true
keep-alive-idle: 600 # 设置TCP连接的空闲超时时间为600秒
keep-alive-interval: 15 # 设置TCP保活探测的间隔时间为15秒

profile:
  store-selected: true # 存储select选择记录
  store-fake-ip: true # 持久化fake-ip

## DNS模块
dns:
  enable: true                    # 启用mihomo的DNS模块, 接管系统DNS解析
  enhanced-mode: fake-ip          # 启用Fake-IP模式, 为非直连域名分配虚拟IP (如28.0.0.1/8范围内的IP) 避免直接暴露真实目标IP
  listen: 0.0.0.0:53
  ipv6: false
  respect-rules: true             # DNS解析结果遵循rules部分的代理规则 (如cn_domain走直连 google_domain走代理)
  fake-ip-range: 28.0.0.1/8       # 指定Fake-IP模式的虚拟IP地址范围
  fake-ip-filter-mode: blacklist  # 设置Fake-IP过滤模式为黑名单模式, fake-ip-filter列表中的域名不会分配Fake-IP
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain,ntp_domain"
    - "*.lan"
    - "+.local"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "+.xboxlive.com"
    - "xbox.*.microsoft.com"
    - "+.battlenet.com.cn"
    - "+.battlenet.com"
    - "+.blzstatic.cn"
    - "+.battle.net"
    - "+.srv.nintendo.net"
    - "+.stun.playstation.net"
    - "+.kuwo.cn"
    - "+.migu.cn"
    - "+.market.xiaomi.com"
    - "localhost.ptlogin2.qq.com"
    - "time.*.com"
  default-nameserver:             # 指定初始DNS解析服务器, 用于解析mihomo自身需要的域名(如订阅地址、规则集地址)
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:        # 代理服务器使用的DNS解析服务器
    - https://dns.google/dns-query
    - https://223.5.5.5/dns-query
  nameserver:                     # 指定常规DNS解析服务器
    - https://223.5.5.5/dns-query
    - https://doh.pub/dns-query

# 机场订阅
proxy-providers:
  Airport:
    url: "机场通用订阅"
    type: http
    interval: 86400 # 自动更新时间(秒)
    health-check: # 节点自动检测延时
      enable: true
      url: "http://connectivitycheck.platform.hicloud.com/generate_204"
      interval: 300
    proxy: 直连 # 通过直连拉取机场订阅, 该名字是指策略组或某个代理节点的名字

# 节点信息
proxies:
  - name: 直连
    type: direct
  # 代理链流量走向机制 丨 Mihomo本机 <-> 前置节点 <-> 落地节点 <-> Internet互联网
  - name: ⛓️ 链式代理
    dialer-proxy: "🇸🇬 狮城节点"
    type: socks5
    server: 1.1.1.1
    port: 1080
    username: "12345"
    password: "12345"

# 出站策略
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 📹 YouTube, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 🍀 Google, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 🤖 AI, type: select, proxies: [⛓️ 链式代理, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 🐬 OneDrive, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 🪟 Microsoft, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点, 直连]}
  - {name: 🎵 TikTok, type: select, proxies: [⛓️ 链式代理, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 📲 Telegram, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: 🎥 NETFLIX, type: select, proxies: [⛓️ 链式代理, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点]}
  - {name: ✈️ Speedtest, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点, 直连]}
  - {name: 💶 PayPal, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点, 直连]}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [⛓️ 链式代理, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点, 🌐 全部节点, 直连]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇲🇾 马来西亚节点, type: select, include-all: true, filter: "(?i)马来|my|mys|malay|malaysia"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🇳🇱 荷兰节点, type: select, include-all: true, filter: "(?i)荷兰|nl|netherlands"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
rules:
  - DOMAIN-SUFFIX,gitlab.com,🚀 默认代理
  - IP-CIDR,10.0.0.0/8,直连
  - IP-CIDR,172.16.0.0/12,直连
  - IP-CIDR,192.168.0.0/16,直连
  - RULE-SET,private_domain,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,ntp_domain,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
# https://github.com/MetaCubeX/meta-rules-dat
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  ai: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  ntp_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ntp.mrs"}

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}