# Copyright (c) 2025 honeok <honeok@disroot.org>
#                           <i@honeok.com>
# Thanks:
# https://github.com/qichiyuhub/rule
# https://github.com/Kook-9527/Plugin-backup
# https://github.com/zzwsec
#
# SPDX-License-Identifier: GPL-2.0-only

# 全局配置
port: 7890                        # HTTP代理端口
socks-port: 7891                  # SOCKS5代理端口
redir-port: 7892                  # 透明代理(redirect)端口
mixed-port: 7893                  # 混合代理端口, 同时支持HTTP和SOCKS5协议
tproxy-port: 7894                 # TProxy(透明代理)端口
allow-lan: true                   # 允许局域网内的其他设备连接到mihomo代理服务
bind-address: "*"                 # 监听的网络接口地址允许所有
ipv6: false                       # 禁用IPv6支持
unified-delay: true               # 启用统一的延迟测试方法
tcp-concurrent: true              # 启用TCP并发连接
log-level: warning                # 日志输出级别warning
find-process-mode: 'off'          # 禁用基于进程的流量匹配
# interface-name: en0              # 绑定网卡名
global-client-fingerprint: chrome # 设置全局客户端指纹为Chrome浏览器
keep-alive-idle: 600              # 设置TCP连接的空闲超时时间为600秒
keep-alive-interval: 15           # 设置TCP保活探测的间隔时间为15秒
disable-keep-alive: false         # 不禁用TCP保活机制
profile:
  store-selected: true            # 启用保存用户手动选择的代理节点
  store-fake-ip: true             # 启用缓存Fake-IP映射

# DNS模块
dns:
  enable: true                    # 启用mihomo的DNS模块, 接管系统DNS解析
  enhanced-mode: fake-ip          # 启用Fake-IP模式, 为非直连域名分配虚拟IP (如28.0.0.1/8范围内的IP) 避免直接暴露真实目标IP
  listen: 0.0.0.0:53
  ipv6: false
  respect-rules: true             # DNS解析结果遵循rules部分的代理规则 (如cn_domain走直连 google_domain走代理)
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8       # 指定Fake-IP模式的虚拟IP地址范围
  fake-ip-filter-mode: blacklist  # 设置Fake-IP过滤模式为黑名单模式, fake-ip-filter列表中的域名不会分配Fake-IP
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain,ntp_domain"
    - "*.lan"
    - "+.local"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "+.xboxlive.com"
    - "xbox.*.microsoft.com"
    - "+.battlenet.com.cn"
    - "+.battlenet.com"
    - "+.blzstatic.cn"
    - "+.battle.net"
    - "+.srv.nintendo.net"
    - "+.stun.playstation.net"
    - "+.kuwo.cn"
    - "+.migu.cn"
    - "+.market.xiaomi.com"
    - "localhost.ptlogin2.qq.com"
    - "time.*.com"
  default-nameserver:             # 指定初始DNS解析服务器, 用于解析mihomo自身需要的域名(如订阅地址、规则集地址)
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:        # 代理服务器使用的DNS解析服务器
    - https://dns.google/dns-query
    - https://dns.alidns.com/dns-query
  nameserver:                     # 指定常规DNS解析服务器
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query

# 机场订阅
proxy-providers:
  Airport:
    url: "机场通用订阅"
    type: http
    interval: 86400 # 自动更新时间(秒)
    health-check: # 节点自动检测延时
      enable: true
      url: https://www.google.com/generate_204
      interval: 300
    proxy: 直连 # 通过直连拉取机场订阅, 该名字是指策略组或某个代理节点的名字

# 节点信息
proxies:
  - name: 直连
    type: direct

# 出站策略
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 📹 YouTube, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🍀 Google, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🤖 AI, type: select, proxies: [🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🐬 OneDrive, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🪟 Microsoft, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🎵 TikTok, type: select, proxies: [🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 📲 Telegram, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🎥 NETFLIX, type: select, proxies: [🇸🇬 新加坡节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: ✈️ Speedtest, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 💶 PayPal, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇲🇾 马来西亚节点, 🇺🇲 美国节点, 🇳🇱 荷兰节点 🌐 全部节点, 直连]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hkg|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|jpn|japan"}
  - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|sg|sgp|singapore"}
  - {name: 🇲🇾 马来西亚节点, type: select, include-all: true, filter: "(?i)马来|my|mys|malay|malaysia"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|usa|united states|america"}
  - {name: 🇳🇱 荷兰节点, type: select, include-all: true, filter: "(?i)荷兰|nl|netherlands"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
rules:
  - DOMAIN-SUFFIX,gitlab.com,🚀 默认代理
  - RULE-SET,private_domain,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,ntp_domain,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
# https://github.com/MetaCubeX/meta-rules-dat
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/main/proxy.list"}
  ai: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  ntp_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ntp.mrs"}

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}